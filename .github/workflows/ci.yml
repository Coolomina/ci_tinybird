
name: Tinybird CI with branching

on:
  workflow_call:
    inputs:
      tb_deploy:
        description: "use tb deploy based on git releases"
        required: false
        type: boolean
        default: false
    secrets:
      admin_token:
        required: true
      tb_host:
        required: true

jobs:
  ci_branching:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/setup-python@v3
        with:
          python-version: "3.8"
          architecture: "x64"

      - name: Set environment variables
        run: |
          _ENV_FLAGS="${ENV_FLAGS:=--last-partition --wait}"
          ls -lha
          echo $pwd
          cd $DATA_PROJECT_DIR
          echo $DATA_PROJECT_DIR
          _NORMALIZED_ENV_NAME=`echo $DATA_PROJECT_DIR | rev | cut -d "/" -f 1 | rev`
          GIT_BRANCH=${GITHUB_HEAD_REF}
          echo "GIT_BRANCH=$GIT_BRANCH" >> $GITHUB_ENV
      - name: Install Tinybird CLI
        run: pip install tinybird-cli

      - name: Tinybird version
        run: tb --version       

      - name: Check all the data files syntax
        run: tb check  

      - name: Create new test Environment with data
        run: |
          tb \
          --host ${{ secrets.tb_host }} \
          --token ${{ secrets.admin_token }} \
          env create tmp_ci_${_NORMALIZED_ENV_NAME}_${GITHUB_RUN_ID} \
          ${_ENV_FLAGS}

      - name: Use environment token
        run: |
          ENV_TOKEN="$(cat .tinyb | jq -r '.token')"
          echo "::add-mask::$ENV_TOKEN"
          echo "TB_TOKEN=$ENV_TOKEN" >> $GITHUB_ENV

      - name: List changes with production Workspace
        run: tb diff --production --no-verbose

      - name: Push changes to the test Environment
        run: |
          PUSH_FILE=./deployment/${{env.GIT_BRANCH}}-push.sh
          if [ -f "$PUSH_FILE" ]; then
            ./deployment/${{env.GIT_BRANCH}}-push.sh
          else
            if ${{ inputs.tb_deploy}}; then
              tb deploy --populate --fixtures --wait
            else
              tb push --push-deps --only-changes --fixtures --force --populate --wait
            fi
          fi

      - name: List changes with test Environment (should be empty)
        run: tb diff

      - name: Run fixture tests
        run: |
          if [ -f ./scripts/exec_test.sh ]; then
            ./scripts/exec_test.sh
          fi

      - name: Run data quality tests
        run: |
          tb test run -v

      - name: Get regression labels
        id: regression_labels
        uses: SamirMarin/get-labels-action@v0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          label_key: regression

      - name: Run pipe regression tests
        run: |
          REGRESSION_FILE=./deployment/${{env.GIT_BRANCH}}-regression.yaml
          echo ${{ steps.regression_labels.outputs.labels }}
          REGRESSION_LABELS=$(echo "${{ steps.regression_labels.outputs.labels }}" | awk -F, '{for (i=1; i<=NF; i++) if ($i ~ /^--/) print $i}' ORS=',' | sed 's/,$//')
          echo ${REGRESSION_LABELS}
          tb env regression-tests coverage --wait $(echo ${REGRESSION_LABELS} | tr , ' ')
  cleanup:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [ci_branching]
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-python@v3
        with:
          python-version: "3.8"
          architecture: "x64"

      - name: Install Tinybird CLI
        run: pip install tinybird-cli

      - name: Tinybird version
        run: tb --version       

      - name: Drop test Environment
        run: |
          tb \
          --host ${{ secrets.tb_host }} \
          --token ${{ secrets.admin_token }} \
          env rm tmp_ci_${_NORMALIZED_ENV_NAME}_${GITHUB_RUN_ID} \
          --yes
