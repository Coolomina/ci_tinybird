name: Tinybird CD with versioning

on:
  workflow_call:
    inputs:
      tb_deploy:
        description: "use tb deploy based on git releases"
        required: false
        type: boolean
        default: false
      data_project_dir:
        description: "relative path of the folder containing the data project"
        required: false
        type: string
        default: .
    secrets:
      admin_token:
        required: true
      tb_host:
        required: true

jobs:
  push_changes:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inpupts.data_project_dir }}
    name: Push changes to Workspace
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 300
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/setup-python@v3
        with:
          python-version: "3.8"
          architecture: "x64"
      - name: Set environment variables
        run: |
          GIT_BRANCH=${GITHUB_HEAD_REF}
          source .tinyenv
          echo "GIT_BRANCH=$GIT_BRANCH" >> $GITHUB_ENV

      - name: Install Tinybird CLI
        run: pip install tinybird-cli

      - name: Tinybird version
        run: tb --version

      - name: Check all the data files syntax
        run: tb check

      - name: Authenticate
        run: |
          tb auth \
          --host ${{ secrets.tb_host }} \
          --token ${{ secrets.admin_token }} \

      - name: List changes with Workspace
        run: tb diff --no-verbose

      - name: Push changes to Workspace
        run: |
            source .tinyenv
            CI_DEPLOY_FILE=./deploy/${VERSION}/ci-deploy.sh
            if [ -f "$CI_DEPLOY_FILE" ]; then
              ./deploy/${VERSION}/ci-deploy.sh
            else
              tb deploy --populate --fixtures --wait
            fi

      - name: List changes with Workspace (should be empty)
        run: tb diff

      - name: Deploy changes to the main Workspace
        run: |
            if ${{ inputs.tb_deploy}}; then
              tb env deploy --semver ${VERSION} --wait
              tb release ls
            else
              CD_DEPLOY_FILE=./deploy/${VERSION}/cd-deploy.sh
              if [! -f "$CD_DEPLOY_FILE" ]; then
                tb deploy
              fi
            fi
          fi

      - name: run post CD deploy commands
        run: |
            source .tinyenv
            CD_DEPLOY_FILE=./deploy/${VERSION}/cd-deploy.sh
            if [ -f "$CD_DEPLOY_FILE" ]; then
              ./deploy/${VERSION}/cd-deploy.sh
            fi

      - name: echo result
        run: echo "A new Release with version $VERSION has been deployed in preview status. When you want to make it live use `tb release promote --semver $VERSION`"
